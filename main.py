import logging
from aiogram import Bot, Dispatcher
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram import F
from config import TOKEN

# Включаем логирование
logging.basicConfig(level=logging.INFO)

# Инициализация бота и диспетчера
bot = Bot(token=TOKEN)
dp = Dispatcher()

# Добавятся позже
# Список упражнений
exercises = [
    "1. Упражнение «5 почему»\n\n"
    "Этот метод помогает выявить коренные причины проблемы, задавая вопрос \"почему\" несколько раз (обычно пять). Это позволяет глубже понять суть проблемы.\n\n"
    "Пример:\n\n"
    "• Проблема: Продукт не продается.\n\n"
    "• Почему? — Потому что клиенты не знают о нем.\n"
    "• Почему? — Потому что у нас нет рекламной кампании.\n"
    "• Почему? — Потому что у нас ограниченный бюджет.\n"
    "• Почему? — Потому что мы не привлекли инвесторов.\n"
    "• Почему? — Потому что не подготовили привлекательную бизнес-модель.\n",
    "2. Упражнение «Ограничения»\n\n"
    "Этот метод предполагает наложение ограничений на процесс генерации идей, что может помочь сосредоточиться на решении проблемы с новых углов. Ограничения могут быть временными, финансовыми или ресурсными.\n\n"
    "Пример:\n\n"
    "• Задача: Создать новый продукт с ограниченным бюджетом в 1000 долларов и сроком реализации в 2 месяца.\n\n"
    "• Идея: Разработать минимально жизнеспособный продукт (MVP), который можно протестировать на рынке без больших затрат.\n",
    "3. Упражнение «6-3-5»\n\n"
    "Этот метод включает шесть участников, которые генерируют три идеи за пять минут. Затем идеи передаются следующему участнику для доработки или создания новых идей на основе предыдущих.\n\n"
    "Пример\n\n"
    "• Участники: 6 человек.\n\n"
    "• Каждый участник записывает три идеи по теме \"Как улучшить клиентский сервис\".\n\n"
    "• Через пять минут листы передаются дальше, и каждый участник добавляет свои идеи или улучшения к уже предложенным.\n",
    "4. Упражнение «Вдохновение искусством»\n\n"
    "Этот метод предполагает использование произведений искусства (картины, музыка, литература) для вдохновения и генерации новых идей. Искусство может вызвать эмоции и ассоциации, которые помогут взглянуть на проблему с другой стороны.\n\n"
    "Пример:\n\n"
    "• Задача: Разработать новый логотип для компании.\n\n"
    "• Метод: Посмотреть на работы известных художников, проанализировать их цветовые палитры и формы, а затем использовать эти элементы для создания уникального логотипа.\n",
    "5. Упражнение «Метод фокальных объектов»\n\n"
    "Этот метод предполагает использование существующих объектов или концепций для вдохновения. Участники выбирают случайные объекты и пытаются найти способы их применения в новой области или для решения проблемы.\n\n"
    "Пример:\n\n"
    "1. Запиши свою идею/проблему (пример: подписка на вендинг)\n"
    "2. Запиши 3 случайных существительных (пример: дерево, мост, птица)\n\n"
    "• Задача: К каждому существительному добавь по 3 прилагательных (пример: дерево зеленое, высокое, мощное)\n\n"
    "• Метод: Соедини прилагательные со своей идеей (Подписка на вендинг при вступление в сообщество \"зеленых\", подписка на вендинг с высоким результатом по успеваемости, подписка на вендинг при посещении тренажерного зала )\n",
    "6.  Упражнение «Сторителлинг»\n\n"
    "Сторителлинг заключается в использовании рассказов для передачи информации и идей. Этот метод помогает создать эмоциональную связь с аудиторией и сделать идеи более запоминающимися.\n\n"
    "Пример:\n\n"
    "• Задача: Презентация нового продукта.\n\n"
    "• Метод: Создание истории о том, как продукт изменил жизнь конкретного клиента, включая его проблемы и решение, которое предложил продукт.\n",
    "7. Упражнение «SCAMPER»\n\n"
    "Метод SCAMPER включает в себя семь стратегий для доработки существующих идей: Замена (Substitute), Комбинирование (Combine), Адаптация (Adapt), Модификация (Modify), Использование по-другому (Put to another use), Устранение (Eliminate) и Реверсирование (Reverse).\n\n"
    "Пример:\n\n"
    "• Продукт: Чашка для кофе.\n\n"
    "  • Замена: Использовать другой материал, например, бамбук.\n"
    "  • Комбинирование: Чашка с встроенным термосом.\n"
    "  • Адаптация: Чашка, которая меняет цвет при нагревании.\n",
    "8. Упражнение «6 шляп мышления»\n\n"
    "Этот метод разработан Эдвардом де Боно и включает шесть различных \"шляп\", каждая из которых представляет определенный стиль мышления: белая (факты), красная (эмоции), черная (критика), жёлтая (позитив), зелёная (креативность) и синяя (управление процессом).\n\n"
    "Пример:\n\n"
    "• Задача: Оценить новый проект.\n\n"
    "  • Белая шляпа: Какие факты у нас есть о проекте?\n\n"
    "  • Красная шляпа: Как мы чувствуем себя по поводу этого проекта?\n\n"
    "  • Чёрная шляпа: Какие риски существуют?\n\n"
    "  • Жёлтая шляпа: Какие преимущества?\n\n"
    "  • Зелёная шляпа: Какие новые идеи мы можем предложить?\n\n"
    "  • Синяя шляпа: Как организовать обсуждение?\n",
    "9.Упражнение «Ментальные карты»:\n\n"
    "Ментальные карты — это визуальный способ организации информации, который помогает связать идеи и концепции. Они могут быть использованы для мозгового штурма или для структурирования мыслей.\n\n"
    "Пример:\n\n"
    "• Тема: Путешествия.\n"
    "• В центре карты — 'Путешествия', от него отходят ветви с подкатегориями: 'Направления', 'Бюджет', 'Достопримечательности', 'Транспорт' и т.д.",
    "10.Метод «Уолта Диснея»:\n\n"
    "Этот метод включает три роли, которые помогают развивать идеи: мечтатель (генерирует идеи), реалист (оценивает и планирует реализацию) и критик (выявляет недостатки и риски).\n\n"
    "Пример:\n\n"
    "• Идея: Новый тематический парк.\n\n"
    "  • Мечтатель: Генерирует фантастические аттракционы и концепции.\n"
    "  • Реалист: Оценивает стоимость, логистику и ресурсы.\n"
    "  • Критик: Анализирует возможные проблемы и конкуренцию.",
    "11.Упражнение «Обратный мозговой штурм»:\n\n"
    "Этот метод предполагает рассматривание проблемы с обратной стороны. Вместо того чтобы генерировать идеи о том, как решить проблему, участники обсуждают, как можно усугубить её.\n\n"
    "Пример:\n\n"
    "• Проблема: Увеличение продаж.\n"
    "• Вопрос: Как мы можем сделать так, чтобы продажи упали?\n\n"
    "• Идеи могут включать плохое обслуживание клиентов, высокие цены или отсутствие маркетинга.\n\n"
    "• Затем участники могут использовать эти идеи для разработки стратегий по улучшению ситуации."
]

# Функция для создания клавиатуры
def get_keyboard(start_over=False):
    if start_over:
        # Если упражнения завершены, предлагаем кнопку "Начать сначала"
        return ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="Начать упражнения сначала")]
            ],
            resize_keyboard=True
        )
    else:
        # Если упражнения продолжаются, предлагаем кнопку "Следующее упражнение"
        return ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="Следующее упражнение")]
            ],
            resize_keyboard=True
        )

# Индекс текущего упражнения для каждого пользователя
user_exercise_index = {}

# Обработка команды /start
@dp.message(Command("start"))
async def send_welcome(message: Message):
    user_exercise_index[message.from_user.id] = 0
    await message.answer("Привет! Давай начнем выполнять наши упражнения.\n\n" + exercises[0], reply_markup=get_keyboard())

# Обработка кнопки "Следующее упражнение" или "Начать упражнения сначала"
@dp.message(F.text.in_({"Следующее упражнение", "Начать упражнения сначала"}))
async def handle_exercise(message: Message):
    user_id = message.from_user.id
    index = user_exercise_index.get(user_id, 0)

    if message.text == "Начать упражнения сначала":
        # Сбрасываем индекс для пользователя
        index = 0
        user_exercise_index[user_id] = index
        await message.answer("Начинаем сначала!\n" + exercises[index], reply_markup=get_keyboard())
    else:
        if index < len(exercises) - 1:
            # Увеличиваем индекс и отправляем следующее упражнение
            index += 1
            user_exercise_index[user_id] = index
            await message.answer(exercises[index], reply_markup=get_keyboard())
        else:
            # Если это последнее упражнение, предлагаем начать сначала
            await message.answer("Поздравляю! Вы завершили все упражнения.", reply_markup=get_keyboard(start_over=True))

# Запуск бота
if __name__ == '__main__':
    dp.run_polling(bot)
